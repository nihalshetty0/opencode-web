/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get events */
        get: operations["getEvent"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get app info */
        get: operations["getApp"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/app/init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Initialize the app */
        post: operations["postAppInit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get config info */
        get: operations["getConfig"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all sessions */
        get: operations["getSession"];
        put?: never;
        /** @description Create a new session */
        post: operations["postSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete a session and all its data */
        delete: operations["deleteSessionById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/init": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Analyze the app and create an AGENTS.md file */
        post: operations["postSessionByIdInit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/abort": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Abort a session */
        post: operations["postSessionByIdAbort"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Share a session */
        post: operations["postSessionByIdShare"];
        /** @description Unshare the session */
        delete: operations["deleteSessionByIdShare"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/summarize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Summarize the session */
        post: operations["postSessionByIdSummarize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/session/{id}/message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List messages for a session */
        get: operations["getSessionByIdMessage"];
        put?: never;
        /** @description Create and send a new message to a session */
        post: operations["postSessionByIdMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/config/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all providers */
        get: operations["getConfigProviders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/find": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find text in files */
        get: operations["getFind"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/find/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find files */
        get: operations["getFindFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/find/symbol": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find workspace symbols */
        get: operations["getFindSymbol"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Read a file */
        get: operations["getFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get file status */
        get: operations["getFileStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/log": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Write a log entry to the server logs */
        post: operations["postLog"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/mode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all modes */
        get: operations["getMode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Event: components["schemas"]["Event.lsp.client.diagnostics"] | components["schemas"]["Event.permission.updated"] | components["schemas"]["Event.file.edited"] | components["schemas"]["Event.installation.updated"] | components["schemas"]["Event.message.updated"] | components["schemas"]["Event.message.removed"] | components["schemas"]["Event.message.part.updated"] | components["schemas"]["Event.storage.write"] | components["schemas"]["Event.session.updated"] | components["schemas"]["Event.session.deleted"] | components["schemas"]["Event.session.idle"] | components["schemas"]["Event.session.error"] | components["schemas"]["Event.file.watcher.updated"];
        "Event.lsp.client.diagnostics": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "lsp.client.diagnostics";
            properties: {
                serverID: string;
                path: string;
            };
        };
        "Event.permission.updated": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "permission.updated";
            properties: components["schemas"]["permission.info"];
        };
        "permission.info": {
            id: string;
            sessionID: string;
            title: string;
            metadata: {
                [key: string]: unknown;
            };
            time: {
                created: number;
            };
        };
        "Event.file.edited": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "file.edited";
            properties: {
                file: string;
            };
        };
        "Event.installation.updated": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "installation.updated";
            properties: {
                version: string;
            };
        };
        "Event.message.updated": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "message.updated";
            properties: {
                info: components["schemas"]["Message"];
            };
        };
        Message: components["schemas"]["UserMessage"] | components["schemas"]["AssistantMessage"];
        UserMessage: {
            id: string;
            sessionID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            role: "user";
            time: {
                created: number;
            };
        };
        AssistantMessage: {
            id: string;
            sessionID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            role: "assistant";
            time: {
                created: number;
                completed?: number;
            };
            error?: components["schemas"]["ProviderAuthError"] | components["schemas"]["UnknownError"] | components["schemas"]["MessageOutputLengthError"] | components["schemas"]["MessageAbortedError"];
            system: string[];
            modelID: string;
            providerID: string;
            path: {
                cwd: string;
                root: string;
            };
            summary?: boolean;
            cost: number;
            tokens: {
                input: number;
                output: number;
                reasoning: number;
                cache: {
                    read: number;
                    write: number;
                };
            };
        };
        ProviderAuthError: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            name: "ProviderAuthError";
            data: {
                providerID: string;
                message: string;
            };
        };
        UnknownError: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            name: "UnknownError";
            data: {
                message: string;
            };
        };
        MessageOutputLengthError: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            name: "MessageOutputLengthError";
            data: Record<string, never>;
        };
        MessageAbortedError: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            name: "MessageAbortedError";
            data: Record<string, never>;
        };
        "Event.message.removed": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "message.removed";
            properties: {
                sessionID: string;
                messageID: string;
            };
        };
        "Event.message.part.updated": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "message.part.updated";
            properties: {
                part: components["schemas"]["Part"];
            };
        };
        Part: components["schemas"]["TextPart"] | components["schemas"]["FilePart"] | components["schemas"]["ToolPart"] | components["schemas"]["StepStartPart"] | components["schemas"]["StepFinishPart"];
        TextPart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "text";
            text: string;
            synthetic?: boolean;
            time?: {
                start: number;
                end?: number;
            };
        };
        FilePart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "file";
            mime: string;
            filename?: string;
            url: string;
        };
        ToolPart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "tool";
            callID: string;
            tool: string;
            state: components["schemas"]["ToolState"];
        };
        ToolState: components["schemas"]["ToolStatePending"] | components["schemas"]["ToolStateRunning"] | components["schemas"]["ToolStateCompleted"] | components["schemas"]["ToolStateError"];
        ToolStatePending: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            status: "pending";
        };
        ToolStateRunning: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            status: "running";
            input?: unknown;
            title?: string;
            metadata?: {
                [key: string]: unknown;
            };
            time: {
                start: number;
            };
        };
        ToolStateCompleted: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            status: "completed";
            input: {
                [key: string]: unknown;
            };
            output: string;
            title: string;
            metadata: {
                [key: string]: unknown;
            };
            time: {
                start: number;
                end: number;
            };
        };
        ToolStateError: {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            status: "error";
            input: {
                [key: string]: unknown;
            };
            error: string;
            time: {
                start: number;
                end: number;
            };
        };
        StepStartPart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "step-start";
        };
        StepFinishPart: {
            id: string;
            sessionID: string;
            messageID: string;
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "step-finish";
            cost: number;
            tokens: {
                input: number;
                output: number;
                reasoning: number;
                cache: {
                    read: number;
                    write: number;
                };
            };
        };
        "Event.storage.write": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "storage.write";
            properties: {
                key: string;
                content?: unknown;
            };
        };
        "Event.session.updated": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "session.updated";
            properties: {
                info: components["schemas"]["Session"];
            };
        };
        Session: {
            id: string;
            parentID?: string;
            share?: {
                url: string;
            };
            title: string;
            version: string;
            time: {
                created: number;
                updated: number;
            };
            revert?: {
                messageID: string;
                part: number;
                snapshot?: string;
            };
        };
        "Event.session.deleted": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "session.deleted";
            properties: {
                info: components["schemas"]["Session"];
            };
        };
        "Event.session.idle": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "session.idle";
            properties: {
                sessionID: string;
            };
        };
        "Event.session.error": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "session.error";
            properties: {
                sessionID?: string;
                error?: components["schemas"]["ProviderAuthError"] | components["schemas"]["UnknownError"] | components["schemas"]["MessageOutputLengthError"] | components["schemas"]["MessageAbortedError"];
            };
        };
        "Event.file.watcher.updated": {
            /**
             * @description discriminator enum property added by openapi-typescript
             * @enum {string}
             */
            type: "file.watcher.updated";
            properties: {
                file: string;
                event: "rename" | "change";
            };
        };
        App: {
            user: string;
            hostname: string;
            git: boolean;
            path: {
                config: string;
                data: string;
                root: string;
                cwd: string;
                state: string;
            };
            time: {
                initialized?: number;
            };
        };
        Config: {
            /** @description JSON schema reference for configuration validation */
            $schema?: string;
            /** @description Theme name to use for the interface */
            theme?: string;
            /** @description Custom keybind configurations */
            keybinds?: components["schemas"]["KeybindsConfig"];
            /**
             * @description Control sharing behavior: 'auto' enables automatic sharing, 'disabled' disables all sharing
             * @enum {string}
             */
            share?: "auto" | "disabled";
            /** @description @deprecated Use 'share' field instead. Share newly created sessions automatically */
            autoshare?: boolean;
            /** @description Automatically update to the latest version */
            autoupdate?: boolean;
            /** @description Disable providers that are loaded automatically */
            disabled_providers?: string[];
            /** @description Model to use in the format of provider/model, eg anthropic/claude-2 */
            model?: string;
            mode?: {
                build?: components["schemas"]["ModeConfig"];
                plan?: components["schemas"]["ModeConfig"];
            } & {
                [key: string]: components["schemas"]["ModeConfig"];
            };
            /** @description Minimum log level to write to log files */
            log_level?: components["schemas"]["LogLevel"];
            /** @description Custom provider configurations and model overrides */
            provider?: {
                [key: string]: {
                    api?: string;
                    name?: string;
                    env?: string[];
                    id?: string;
                    npm?: string;
                    models: {
                        [key: string]: {
                            id?: string;
                            name?: string;
                            release_date?: string;
                            attachment?: boolean;
                            reasoning?: boolean;
                            temperature?: boolean;
                            tool_call?: boolean;
                            cost?: {
                                input: number;
                                output: number;
                                cache_read?: number;
                                cache_write?: number;
                            };
                            limit?: {
                                context: number;
                                output: number;
                            };
                            options?: {
                                [key: string]: unknown;
                            };
                        };
                    };
                    options?: {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description MCP (Model Context Protocol) server configurations */
            mcp?: {
                [key: string]: components["schemas"]["McpLocalConfig"] | components["schemas"]["McpRemoteConfig"];
            };
            /** @description Additional instruction files or patterns to include */
            instructions?: string[];
            experimental?: {
                hook?: {
                    file_edited?: {
                        [key: string]: {
                            command: string[];
                            environment?: {
                                [key: string]: string;
                            };
                        }[];
                    };
                    session_completed?: {
                        command: string[];
                        environment?: {
                            [key: string]: string;
                        };
                    }[];
                };
            };
        };
        KeybindsConfig: {
            /**
             * @description Leader key for keybind combinations
             * @default ctrl+x
             */
            leader: string;
            /**
             * @description Show help dialog
             * @default <leader>h
             */
            app_help: string;
            /**
             * @description Switch mode
             * @default tab
             */
            switch_mode: string;
            /**
             * @description Open external editor
             * @default <leader>e
             */
            editor_open: string;
            /**
             * @description Create a new session
             * @default <leader>n
             */
            session_new: string;
            /**
             * @description List all sessions
             * @default <leader>l
             */
            session_list: string;
            /**
             * @description Share current session
             * @default <leader>s
             */
            session_share: string;
            /**
             * @description Unshare current session
             * @default <leader>u
             */
            session_unshare: string;
            /**
             * @description Interrupt current session
             * @default esc
             */
            session_interrupt: string;
            /**
             * @description Compact the session
             * @default <leader>c
             */
            session_compact: string;
            /**
             * @description Toggle tool details
             * @default <leader>d
             */
            tool_details: string;
            /**
             * @description List available models
             * @default <leader>m
             */
            model_list: string;
            /**
             * @description List available themes
             * @default <leader>t
             */
            theme_list: string;
            /**
             * @description List files
             * @default <leader>f
             */
            file_list: string;
            /**
             * @description Close file
             * @default esc
             */
            file_close: string;
            /**
             * @description Search file
             * @default <leader>/
             */
            file_search: string;
            /**
             * @description Split/unified diff
             * @default <leader>v
             */
            file_diff_toggle: string;
            /**
             * @description Create/update AGENTS.md
             * @default <leader>i
             */
            project_init: string;
            /**
             * @description Clear input field
             * @default ctrl+c
             */
            input_clear: string;
            /**
             * @description Paste from clipboard
             * @default ctrl+v
             */
            input_paste: string;
            /**
             * @description Submit input
             * @default enter
             */
            input_submit: string;
            /**
             * @description Insert newline in input
             * @default shift+enter,ctrl+j
             */
            input_newline: string;
            /**
             * @description Scroll messages up by one page
             * @default pgup
             */
            messages_page_up: string;
            /**
             * @description Scroll messages down by one page
             * @default pgdown
             */
            messages_page_down: string;
            /**
             * @description Scroll messages up by half page
             * @default ctrl+alt+u
             */
            messages_half_page_up: string;
            /**
             * @description Scroll messages down by half page
             * @default ctrl+alt+d
             */
            messages_half_page_down: string;
            /**
             * @description Navigate to previous message
             * @default ctrl+up
             */
            messages_previous: string;
            /**
             * @description Navigate to next message
             * @default ctrl+down
             */
            messages_next: string;
            /**
             * @description Navigate to first message
             * @default ctrl+g
             */
            messages_first: string;
            /**
             * @description Navigate to last message
             * @default ctrl+alt+g
             */
            messages_last: string;
            /**
             * @description Toggle layout
             * @default <leader>p
             */
            messages_layout_toggle: string;
            /**
             * @description Copy message
             * @default <leader>y
             */
            messages_copy: string;
            /**
             * @description Revert message
             * @default <leader>r
             */
            messages_revert: string;
            /**
             * @description Exit the application
             * @default ctrl+c,<leader>q
             */
            app_exit: string;
        };
        ModeConfig: {
            model?: string;
            prompt?: string;
            tools?: {
                [key: string]: boolean;
            };
        };
        /**
         * @description Log level
         * @enum {string}
         */
        LogLevel: "DEBUG" | "INFO" | "WARN" | "ERROR";
        Provider: {
            api?: string;
            name: string;
            env: string[];
            id: string;
            npm?: string;
            models: {
                [key: string]: components["schemas"]["Model"];
            };
        };
        Model: {
            id: string;
            name: string;
            release_date: string;
            attachment: boolean;
            reasoning: boolean;
            temperature: boolean;
            tool_call: boolean;
            cost: {
                input: number;
                output: number;
                cache_read?: number;
                cache_write?: number;
            };
            limit: {
                context: number;
                output: number;
            };
            options: {
                [key: string]: unknown;
            };
        };
        McpLocalConfig: {
            /**
             * @description Type of MCP server connection (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "local";
            /** @description Command and arguments to run the MCP server */
            command: string[];
            /** @description Environment variables to set when running the MCP server */
            environment?: {
                [key: string]: string;
            };
            /** @description Enable or disable the MCP server on startup */
            enabled?: boolean;
        };
        McpRemoteConfig: {
            /**
             * @description Type of MCP server connection (enum property replaced by openapi-typescript)
             * @enum {string}
             */
            type: "remote";
            /** @description URL of the remote MCP server */
            url: string;
            /** @description Enable or disable the MCP server on startup */
            enabled?: boolean;
        };
        Error: {
            data: {
                [key: string]: unknown;
            };
        };
        Match: {
            path: {
                text: string;
            };
            lines: {
                text: string;
            };
            line_number: number;
            absolute_offset: number;
            submatches: {
                match: {
                    text: string;
                };
                start: number;
                end: number;
            }[];
        };
        Symbol: {
            name: string;
            kind: number;
            location: {
                uri: string;
                range: components["schemas"]["Range"];
            };
        };
        Range: {
            start: {
                line: number;
                character: number;
            };
            end: {
                line: number;
                character: number;
            };
        };
        File: {
            path: string;
            added: number;
            removed: number;
            /** @enum {string} */
            status: "added" | "deleted" | "modified";
        };
        Mode: {
            name: string;
            model?: {
                modelID: string;
                providerID: string;
            };
            prompt?: string;
            tools: {
                [key: string]: boolean;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Event stream */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Event"];
                };
            };
        };
    };
    getApp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 200 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["App"];
                };
            };
        };
    };
    postAppInit: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Initialize the app */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    getConfig: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get config info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Config"];
                };
            };
        };
    };
    getSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of sessions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"][];
                };
            };
        };
    };
    postSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully created session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    deleteSessionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully deleted session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    postSessionByIdInit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    messageID: string;
                    providerID: string;
                    modelID: string;
                };
            };
        };
        responses: {
            /** @description 200 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    postSessionByIdAbort: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Aborted session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    postSessionByIdShare: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully shared session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
        };
    };
    deleteSessionByIdShare: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully unshared session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Session"];
                };
            };
        };
    };
    postSessionByIdSummarize: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    providerID: string;
                    modelID: string;
                };
            };
        };
        responses: {
            /** @description Summarized session */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    getSessionByIdMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of messages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        info: components["schemas"]["Message"];
                        parts: components["schemas"]["Part"][];
                    }[];
                };
            };
        };
    };
    postSessionByIdMessage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    messageID: string;
                    providerID: string;
                    modelID: string;
                    mode: string;
                    parts: (components["schemas"]["FilePart"] | components["schemas"]["TextPart"])[];
                };
            };
        };
        responses: {
            /** @description Created message */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssistantMessage"];
                };
            };
        };
    };
    getConfigProviders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of providers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        providers: components["schemas"]["Provider"][];
                        default: {
                            [key: string]: string;
                        };
                    };
                };
            };
        };
    };
    getFind: {
        parameters: {
            query: {
                pattern: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Matches */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Match"][];
                };
            };
        };
    };
    getFindFile: {
        parameters: {
            query: {
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File paths */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string[];
                };
            };
        };
    };
    getFindSymbol: {
        parameters: {
            query: {
                query: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Symbols */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Symbol"][];
                };
            };
        };
    };
    getFile: {
        parameters: {
            query: {
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File content */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @enum {string} */
                        type: "raw" | "patch";
                        content: string;
                    };
                };
            };
        };
    };
    getFileStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["File"][];
                };
            };
        };
    };
    postLog: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /** @description Service name for the log entry */
                    service: string;
                    /**
                     * @description Log level
                     * @enum {string}
                     */
                    level: "debug" | "info" | "error" | "warn";
                    /** @description Log message */
                    message: string;
                    /** @description Additional metadata for the log entry */
                    extra?: {
                        [key: string]: unknown;
                    };
                };
            };
        };
        responses: {
            /** @description Log entry written successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": boolean;
                };
            };
        };
    };
    getMode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of modes */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Mode"][];
                };
            };
        };
    };
}
